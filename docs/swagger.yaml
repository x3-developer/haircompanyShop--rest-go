definitions:
  docsResponse.CategoryCreate201:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.CategoryCreate400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.categoryErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.CategoryDelete200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.CategoryGetById200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.CategoryList200:
    properties:
      data:
        items:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.ResponseDTO'
        type: array
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.CategoryUpdate200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.CategoryUpdate400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.categoryErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.DashboardLogin200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_auth_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.DashboardLogin400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.authErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.DashboardRefreshToken200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_auth_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.DashboardRefreshToken400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.authErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.DashboardUserCreate201:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.DashboardUserCreate400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.dashboardUserErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.ImageUpload200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_image_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.ImageUpload400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.imageErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.LineCreate201:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_line_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.LineCreate400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.categoryErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.LineDelete200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_line_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.LineGetById200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_line_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.LineList200:
    properties:
      data:
        items:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_line_dto.ResponseDTO'
        type: array
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.LineUpdate200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_line_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.LineUpdate400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.categoryErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.ProductTypeCreate201:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_product_type_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.ProductTypeCreate400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.categoryErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.ProductTypeDelete200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_product_type_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.ProductTypeGetById200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_product_type_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.ProductTypeList200:
    properties:
      data:
        items:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_product_type_dto.ResponseDTO'
        type: array
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.ProductTypeUpdate200:
    properties:
      data:
        $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_product_type_dto.ResponseDTO'
      isSuccess:
        example: true
        type: boolean
    type: object
  docsResponse.ProductTypeUpdate400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      fields:
        items:
          $ref: '#/definitions/docsResponse.categoryErrorField'
        type: array
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.Response400:
    properties:
      errorCode:
        enum:
        - BAD_REQUEST
        type: string
      isSuccess:
        example: false
        type: boolean
      message:
        example: Bad request or validation error
        type: string
    type: object
  docsResponse.Response401:
    properties:
      errorCode:
        enum:
        - UNAUTHORIZED
        type: string
      isSuccess:
        example: false
        type: boolean
      message:
        example: Unauthorized
        type: string
    type: object
  docsResponse.Response403:
    properties:
      errorCode:
        enum:
        - FORBIDDEN
        type: string
      isSuccess:
        example: false
        type: boolean
      message:
        example: Forbidden
        type: string
    type: object
  docsResponse.Response404:
    properties:
      errorCode:
        enum:
        - NOT_FOUND
        type: string
      isSuccess:
        example: false
        type: boolean
      message:
        example: Resource not found
        type: string
    type: object
  docsResponse.Response409:
    properties:
      errorCode:
        enum:
        - HAS_LINKED_ENTITIES
        type: string
      isSuccess:
        example: false
        type: boolean
      message:
        example: Conflict
        type: string
    type: object
  docsResponse.Response413:
    properties:
      errorCode:
        enum:
        - REQUEST_TOO_LARGE
        type: string
      isSuccess:
        example: false
        type: boolean
      message:
        example: Request entity too large
        type: string
    type: object
  docsResponse.Response500:
    properties:
      errorCode:
        enum:
        - SERVER_ERROR
        type: string
      isSuccess:
        example: false
        type: boolean
      message:
        example: Internal server error
        type: string
    type: object
  docsResponse.authErrorField:
    properties:
      errorCode:
        enum:
        - REQUIRED
        - INVALID_EMAIL
        - MIN_LENGTH
        - MAX_LENGTH
        - INVALID_TOKEN
        type: string
      field:
        enum:
        - email
        - password
        - refreshToken
        type: string
    type: object
  docsResponse.categoryErrorField:
    properties:
      errorCode:
        enum:
        - NOT_UNIQUE
        - NOT_FOUND
        type: string
      field:
        enum:
        - name
        - slug
        - parentId
        type: string
    type: object
  docsResponse.dashboardUserErrorField:
    properties:
      errorCode:
        enum:
        - NOT_UNIQUE
        - NOT_FOUND
        type: string
      field:
        enum:
        - name
        - slug
        - parentId
        type: string
    type: object
  docsResponse.imageErrorField:
    properties:
      errorCode:
        example: INVALID_FORMAT
        type: string
      field:
        example: images
        type: string
    type: object
  dto.DashboardLoginDTO:
    properties:
      email:
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.RefreshTokenDTO:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  haircompany-shop-rest_internal_modules_v1_auth_dto.ResponseDTO:
    properties:
      refreshExpiresAt:
        type: integer
      refreshToken:
        type: string
      token:
        type: string
    type: object
  haircompany-shop-rest_internal_modules_v1_category_dto.CreateDTO:
    properties:
      description:
        type: string
      headerImage:
        maxLength: 255
        type: string
      image:
        maxLength: 255
        type: string
      isActive:
        type: boolean
      isShade:
        type: boolean
      isVisibleInMenu:
        type: boolean
      isVisibleOnMain:
        type: boolean
      name:
        maxLength: 255
        minLength: 3
        type: string
      parentId:
        description: Nullable, can be zero
        minimum: 0
        type: integer
      seoDescription:
        type: string
      seoKeys:
        type: string
      seoTitle:
        maxLength: 255
        type: string
      slug:
        maxLength: 255
        minLength: 3
        type: string
      sortIndex:
        maximum: 9999
        minimum: 0
        type: integer
    required:
    - headerImage
    - image
    - name
    - slug
    - sortIndex
    type: object
  haircompany-shop-rest_internal_modules_v1_category_dto.ResponseDTO:
    properties:
      createdAt:
        type: string
      description:
        type: string
      headerImage:
        type: string
      id:
        type: integer
      image:
        type: string
      isActive:
        type: boolean
      isShade:
        type: boolean
      isVisibleInMenu:
        type: boolean
      isVisibleOnMain:
        type: boolean
      name:
        type: string
      parentId:
        type: integer
      seoDescription:
        type: string
      seoKeys:
        type: string
      seoTitle:
        type: string
      slug:
        type: string
      sortIndex:
        type: integer
      updatedAt:
        type: string
    type: object
  haircompany-shop-rest_internal_modules_v1_category_dto.UpdateDTO:
    properties:
      description:
        type: string
      headerImage:
        type: string
      image:
        type: string
      isActive:
        type: boolean
      isShade:
        type: boolean
      isVisibleInMenu:
        type: boolean
      isVisibleOnMain:
        type: boolean
      name:
        maxLength: 255
        minLength: 3
        type: string
      parentId:
        type: integer
      seoDescription:
        type: string
      seoKeys:
        type: string
      seoTitle:
        type: string
      slug:
        maxLength: 255
        minLength: 3
        type: string
      sortIndex:
        minimum: 0
        type: integer
    type: object
  haircompany-shop-rest_internal_modules_v1_dashboard_user_dto.CreateDTO:
    properties:
      email:
        type: string
      password:
        maxLength: 255
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - manager
        type: string
    required:
    - email
    - password
    - role
    type: object
  haircompany-shop-rest_internal_modules_v1_image_dto.ResponseDTO:
    properties:
      image:
        type: string
    type: object
  haircompany-shop-rest_internal_modules_v1_line_dto.CreateDTO:
    properties:
      color:
        example: '#FF5733'
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - color
    - name
    type: object
  haircompany-shop-rest_internal_modules_v1_line_dto.ResponseDTO:
    properties:
      color:
        example: '#FF5733'
        type: string
      createdAt:
        example: "2023-10-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Line Name
        type: string
      updatedAt:
        example: "2023-10-01T12:00:00Z"
        type: string
    type: object
  haircompany-shop-rest_internal_modules_v1_line_dto.UpdateDTO:
    properties:
      color:
        type: string
      name:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  haircompany-shop-rest_internal_modules_v1_product_type_dto.CreateDTO:
    properties:
      name:
        maxLength: 255
        minLength: 3
        type: string
    required:
    - name
    type: object
  haircompany-shop-rest_internal_modules_v1_product_type_dto.ResponseDTO:
    properties:
      createdAt:
        example: "2023-10-01T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Product type Name
        type: string
      updatedAt:
        example: "2023-10-01T12:00:00Z"
        type: string
    type: object
  haircompany-shop-rest_internal_modules_v1_product_type_dto.UpdateDTO:
    properties:
      name:
        maxLength: 255
        minLength: 3
        type: string
    type: object
info:
  contact:
    email: x3.na.tri@gmail.com
    name: API Support
  description: REST API для магазина бренда Hair Company
  title: Hair Company Shop API
  version: "1.0"
paths:
  /api/v1/auth/dashboard/login:
    post:
      consumes:
      - application/json
      description: Authenticate dashboard user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.DashboardLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/docsResponse.DashboardLogin200'
        "400":
          description: Bad Request or Validation Error
          schema:
            $ref: '#/definitions/docsResponse.DashboardLogin400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Dashboard user login
      tags:
      - Auth
  /api/v1/auth/dashboard/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh authentication token for dashboard user
      parameters:
      - description: Refresh token
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/docsResponse.DashboardRefreshToken200'
        "400":
          description: Bad Request or Validation Error
          schema:
            $ref: '#/definitions/docsResponse.DashboardRefreshToken400'
        "401":
          description: Unauthorized or Invalid Token
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Dashboard refresh token
      tags:
      - Auth
  /api/v1/category:
    get:
      description: Retrieve all categories
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            $ref: '#/definitions/docsResponse.CategoryList200'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Get all categories
      tags:
      - Category
  /api/v1/category/{id}:
    get:
      description: Retrieve category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category found
          schema:
            $ref: '#/definitions/docsResponse.CategoryGetById200'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/docsResponse.Response400'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/docsResponse.Response404'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Get category by ID
      tags:
      - Category
  /api/v1/category/{id}/delete:
    delete:
      description: Delete category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted
          schema:
            $ref: '#/definitions/docsResponse.CategoryDelete200'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/docsResponse.Response400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/docsResponse.Response404'
        "409":
          description: Category has linked entities
          schema:
            $ref: '#/definitions/docsResponse.Response409'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Delete category
      tags:
      - Category
  /api/v1/category/{id}/update:
    put:
      consumes:
      - application/json
      description: Update category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category update payload
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.UpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated
          schema:
            $ref: '#/definitions/docsResponse.CategoryUpdate200'
        "400":
          description: Bad request or validation error
          schema:
            $ref: '#/definitions/docsResponse.CategoryUpdate400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Update category
      tags:
      - Category
  /api/v1/category/create:
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category to create
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_category_dto.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Category created successfully
          schema:
            $ref: '#/definitions/docsResponse.CategoryCreate201'
        "400":
          description: Bad Request or Validation Error
          schema:
            $ref: '#/definitions/docsResponse.CategoryCreate400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Create a new category
      tags:
      - Category
  /api/v1/dashboard-user/create:
    post:
      consumes:
      - application/json
      description: Create a new dashboard user with the provided details.
      parameters:
      - description: Dashboard User Create DTO
        in: body
        name: dashboardUser
        required: true
        schema:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_dashboard_user_dto.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Dashboard User Created
          schema:
            $ref: '#/definitions/docsResponse.DashboardUserCreate201'
        "400":
          description: Bad Request or Validation Error
          schema:
            $ref: '#/definitions/docsResponse.DashboardUserCreate400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Create a new dashboard user
      tags:
      - Dashboard User
  /api/v1/image/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload one or more images with a specific imageType. Requires JWT
        authentication.
      parameters:
      - description: Type of image (e.g. category)
        in: formData
        name: imageType
        required: true
        type: string
      - description: Image files to upload (multiple allowed)
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Uploaded images info
          schema:
            items:
              $ref: '#/definitions/docsResponse.ImageUpload200'
            type: array
        "400":
          description: Bad Request or Validation Error
          schema:
            $ref: '#/definitions/docsResponse.ImageUpload400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/docsResponse.Response413'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Upload images
      tags:
      - Image
  /api/v1/line:
    get:
      description: Retrieve all lines
      produces:
      - application/json
      responses:
        "200":
          description: List of lines
          schema:
            $ref: '#/definitions/docsResponse.LineList200'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Get all lines
      tags:
      - Line
  /api/v1/line/{id}:
    get:
      description: Retrieve line by its ID
      parameters:
      - description: Line ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Line found
          schema:
            $ref: '#/definitions/docsResponse.LineGetById200'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/docsResponse.Response400'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "404":
          description: Line not found
          schema:
            $ref: '#/definitions/docsResponse.Response404'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Get line by ID
      tags:
      - Line
  /api/v1/line/{id}/delete:
    delete:
      description: Delete line by ID
      parameters:
      - description: Line ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Line deleted
          schema:
            $ref: '#/definitions/docsResponse.LineDelete200'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/docsResponse.Response400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "404":
          description: Line not found
          schema:
            $ref: '#/definitions/docsResponse.Response404'
        "409":
          description: Line has linked entities
          schema:
            $ref: '#/definitions/docsResponse.Response409'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Delete line
      tags:
      - Line
  /api/v1/line/{id}/update:
    put:
      consumes:
      - application/json
      description: Update line by ID
      parameters:
      - description: Line ID
        in: path
        name: id
        required: true
        type: integer
      - description: Line update payload
        in: body
        name: line
        required: true
        schema:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_line_dto.UpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Line updated
          schema:
            $ref: '#/definitions/docsResponse.LineUpdate200'
        "400":
          description: Bad request or validation error
          schema:
            $ref: '#/definitions/docsResponse.LineUpdate400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Update line
      tags:
      - Line
  /api/v1/line/create:
    post:
      consumes:
      - application/json
      description: Create a new line
      parameters:
      - description: Line to create
        in: body
        name: line
        required: true
        schema:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_line_dto.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Line created successfully
          schema:
            $ref: '#/definitions/docsResponse.LineCreate201'
        "400":
          description: Bad Request or Validation Error
          schema:
            $ref: '#/definitions/docsResponse.LineCreate400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Create a new line
      tags:
      - Line
  /api/v1/product-type:
    get:
      description: Retrieve all productTypes
      produces:
      - application/json
      responses:
        "200":
          description: List of productTypes
          schema:
            $ref: '#/definitions/docsResponse.ProductTypeList200'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Get all productTypes
      tags:
      - ProductType
  /api/v1/product-type/{id}:
    get:
      description: Retrieve productType by its ID
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ProductType found
          schema:
            $ref: '#/definitions/docsResponse.ProductTypeGetById200'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/docsResponse.Response400'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "404":
          description: ProductType not found
          schema:
            $ref: '#/definitions/docsResponse.Response404'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - AppAuth: []
      summary: Get productType by ID
      tags:
      - ProductType
  /api/v1/product-type/{id}/delete:
    delete:
      description: Delete productType by ID
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ProductType deleted
          schema:
            $ref: '#/definitions/docsResponse.ProductTypeDelete200'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/docsResponse.Response400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "404":
          description: ProductType not found
          schema:
            $ref: '#/definitions/docsResponse.Response404'
        "409":
          description: ProductType has linked entities
          schema:
            $ref: '#/definitions/docsResponse.Response409'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Delete productType
      tags:
      - ProductType
  /api/v1/product-type/{id}/update:
    put:
      consumes:
      - application/json
      description: Update productType by ID
      parameters:
      - description: ProductType ID
        in: path
        name: id
        required: true
        type: integer
      - description: ProductType update payload
        in: body
        name: productType
        required: true
        schema:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_product_type_dto.UpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: ProductType updated
          schema:
            $ref: '#/definitions/docsResponse.ProductTypeUpdate200'
        "400":
          description: Bad request or validation error
          schema:
            $ref: '#/definitions/docsResponse.ProductTypeUpdate400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Update productType
      tags:
      - ProductType
  /api/v1/product-type/create:
    post:
      consumes:
      - application/json
      description: Create a new productType
      parameters:
      - description: ProductType to create
        in: body
        name: productType
        required: true
        schema:
          $ref: '#/definitions/haircompany-shop-rest_internal_modules_v1_product_type_dto.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: ProductType created successfully
          schema:
            $ref: '#/definitions/docsResponse.ProductTypeCreate201'
        "400":
          description: Bad Request or Validation Error
          schema:
            $ref: '#/definitions/docsResponse.ProductTypeCreate400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/docsResponse.Response401'
        "403":
          description: Forbidden - Invalid X-AUTH-APP
          schema:
            $ref: '#/definitions/docsResponse.Response403'
        "500":
          description: Server Error
          schema:
            $ref: '#/definitions/docsResponse.Response500'
      security:
      - BearerAuth: []
      - AppAuth: []
      summary: Create a new productType
      tags:
      - ProductType
schemes:
- http
- https
securityDefinitions:
  AppAuth:
    description: Ключ аутентификации приложения из AUTH_APP_KEY
    in: header
    name: X-AUTH-APP
    type: apiKey
  BearerAuth:
    description: 'Введите токен в формате: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
